{"version":3,"sources":["..\\script\\dep\\jshash\\sha1.js","..\\script\\global-modules\\sha1.ts"],"names":["hexcase","b64pad","hex_sha1","s","rstr2hex","rstr_sha1","str2rstr_utf8","b64_sha1","rstr2b64","any_sha1","e","rstr2any","hex_hmac_sha1","k","d","rstr_hmac_sha1","b64_hmac_sha1","any_hmac_sha1","sha1_vm_test","toLowerCase","binb2rstr","binb_sha1","rstr2binb","length","key","data","bkey","ipad","Array","opad","i","hash","concat","input","hex_tab","output","x","charCodeAt","charAt","tab","len","triplet","j","encoding","divisor","remainders","q","quotient","dividend","Math","ceil","floor","full_length","log","y","String","fromCharCode","str2rstr_utf16le","str2rstr_utf16be","w","a","b","c","olda","oldb","oldc","oldd","olde","bit_rol","t","safe_add","sha1_ft","sha1_kt","lsw","msw","num","cnt","sha1Hex","sha1Base64","sha1Any","sha1HmacHex","sha1HmacBase64","sha1HmacAny"],"mappings":"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","file":"573b0cf086e252effbc6ecba18ec241f.map","sourcesContent":["/*\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS 180-1\r\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for details.\r\n */\r\n\r\n/*\r\n * Configurable variables. You may need to tweak these to be compatible with\r\n * the server-side, but the defaults work in most cases.\r\n */\r\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r\nvar b64pad  = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r\n\r\n/*\r\n * These are the functions you'll usually want to call\r\n * They take string arguments and return either hex or base-64 encoded strings\r\n */\r\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\r\nfunction hex_hmac_sha1(k, d)\r\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction b64_hmac_sha1(k, d)\r\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction any_hmac_sha1(k, d, e)\r\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\r\n\r\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\r\nfunction sha1_vm_test()\r\n{\r\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\r\n}\r\n\r\n/*\r\n * Calculate the SHA1 of a raw string\r\n */\r\nfunction rstr_sha1(s)\r\n{\r\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\r\n}\r\n\r\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\r\n */\r\nfunction rstr_hmac_sha1(key, data)\r\n{\r\n  var bkey = rstr2binb(key);\r\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\r\n\r\n  var ipad = Array(16), opad = Array(16);\r\n  for(var i = 0; i < 16; i++)\r\n  {\r\n    ipad[i] = bkey[i] ^ 0x36363636;\r\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n  }\r\n\r\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\r\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\r\n}\r\n\r\n/*\r\n * Convert a raw string to a hex string\r\n */\r\nfunction rstr2hex(input)\r\n{\r\n  try { hexcase } catch(e) { hexcase=0; }\r\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n  var output = \"\";\r\n  var x;\r\n  for(var i = 0; i < input.length; i++)\r\n  {\r\n    x = input.charCodeAt(i);\r\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\r\n           +  hex_tab.charAt( x        & 0x0F);\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to a base-64 string\r\n */\r\nfunction rstr2b64(input)\r\n{\r\n  try { b64pad } catch(e) { b64pad=''; }\r\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n  var output = \"\";\r\n  var len = input.length;\r\n  for(var i = 0; i < len; i += 3)\r\n  {\r\n    var triplet = (input.charCodeAt(i) << 16)\r\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\r\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\r\n    for(var j = 0; j < 4; j++)\r\n    {\r\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\r\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an arbitrary string encoding\r\n */\r\nfunction rstr2any(input, encoding)\r\n{\r\n  var divisor = encoding.length;\r\n  var remainders = Array();\r\n  var i, q, x, quotient;\r\n\r\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\r\n  var dividend = Array(Math.ceil(input.length / 2));\r\n  for(i = 0; i < dividend.length; i++)\r\n  {\r\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\r\n  }\r\n\r\n  /*\r\n   * Repeatedly perform a long division. The binary array forms the dividend,\r\n   * the length of the encoding is the divisor. Once computed, the quotient\r\n   * forms the dividend for the next step. We stop when the dividend is zero.\r\n   * All remainders are stored for later use.\r\n   */\r\n  while(dividend.length > 0)\r\n  {\r\n    quotient = Array();\r\n    x = 0;\r\n    for(i = 0; i < dividend.length; i++)\r\n    {\r\n      x = (x << 16) + dividend[i];\r\n      q = Math.floor(x / divisor);\r\n      x -= q * divisor;\r\n      if(quotient.length > 0 || q > 0)\r\n        quotient[quotient.length] = q;\r\n    }\r\n    remainders[remainders.length] = x;\r\n    dividend = quotient;\r\n  }\r\n\r\n  /* Convert the remainders to the output string */\r\n  var output = \"\";\r\n  for(i = remainders.length - 1; i >= 0; i--)\r\n    output += encoding.charAt(remainders[i]);\r\n\r\n  /* Append leading zero equivalents */\r\n  var full_length = Math.ceil(input.length * 8 /\r\n                                    (Math.log(encoding.length) / Math.log(2)))\r\n  for(i = output.length; i < full_length; i++)\r\n    output = encoding[0] + output;\r\n\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-8.\r\n * For efficiency, this assumes the input is valid utf-16.\r\n */\r\nfunction str2rstr_utf8(input)\r\n{\r\n  var output = \"\";\r\n  var i = -1;\r\n  var x, y;\r\n\r\n  while(++i < input.length)\r\n  {\r\n    /* Decode utf-16 surrogate pairs */\r\n    x = input.charCodeAt(i);\r\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\r\n    {\r\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r\n      i++;\r\n    }\r\n\r\n    /* Encode output as utf-8 */\r\n    if(x <= 0x7F)\r\n      output += String.fromCharCode(x);\r\n    else if(x <= 0x7FF)\r\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0xFFFF)\r\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0x1FFFFF)\r\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\r\n                                    0x80 | ((x >>> 12) & 0x3F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-16\r\n */\r\nfunction str2rstr_utf16le(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\r\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\r\n  return output;\r\n}\r\n\r\nfunction str2rstr_utf16be(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\r\n                                   input.charCodeAt(i)        & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an array of big-endian words\r\n * Characters >255 have their high-byte silently ignored.\r\n */\r\nfunction rstr2binb(input)\r\n{\r\n  var output = Array(input.length >> 2);\r\n  for(var i = 0; i < output.length; i++)\r\n    output[i] = 0;\r\n  for(var i = 0; i < input.length * 8; i += 8)\r\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a string\r\n */\r\nfunction binb2rstr(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length * 32; i += 8)\r\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\r\nfunction binb_sha1(x, len)\r\n{\r\n  /* append padding */\r\n  x[len >> 5] |= 0x80 << (24 - len % 32);\r\n  x[((len + 64 >> 9) << 4) + 15] = len;\r\n\r\n  var w = Array(80);\r\n  var a =  1732584193;\r\n  var b = -271733879;\r\n  var c = -1732584194;\r\n  var d =  271733878;\r\n  var e = -1009589776;\r\n\r\n  for(var i = 0; i < x.length; i += 16)\r\n  {\r\n    var olda = a;\r\n    var oldb = b;\r\n    var oldc = c;\r\n    var oldd = d;\r\n    var olde = e;\r\n\r\n    for(var j = 0; j < 80; j++)\r\n    {\r\n      if(j < 16) w[j] = x[i + j];\r\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\r\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\r\n      e = d;\r\n      d = c;\r\n      c = bit_rol(b, 30);\r\n      b = a;\r\n      a = t;\r\n    }\r\n\r\n    a = safe_add(a, olda);\r\n    b = safe_add(b, oldb);\r\n    c = safe_add(c, oldc);\r\n    d = safe_add(d, oldd);\r\n    e = safe_add(e, olde);\r\n  }\r\n  return Array(a, b, c, d, e);\r\n\r\n}\r\n\r\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\r\nfunction sha1_ft(t, b, c, d)\r\n{\r\n  if(t < 20) return (b & c) | ((~b) & d);\r\n  if(t < 40) return b ^ c ^ d;\r\n  if(t < 60) return (b & c) | (b & d) | (c & d);\r\n  return b ^ c ^ d;\r\n}\r\n\r\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\r\nfunction sha1_kt(t)\r\n{\r\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n         (t < 60) ? -1894007588 : -899497514;\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nfunction safe_add(x, y)\r\n{\r\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n  return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nfunction bit_rol(num, cnt)\r\n{\r\n  return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\n\r\nexport const sha1Hex = hex_sha1;\r\nexport const sha1Base64 = b64_sha1;\r\nexport const sha1Any = any_sha1;\r\nexport const sha1HmacHex = hex_hmac_sha1;\r\nexport const sha1HmacBase64 = b64_hmac_sha1;\r\nexport const sha1HmacAny = any_hmac_sha1;\r\n","/**\n * YJC <https://github.com/yangjc> @2018-03-23\n */\n\n'use strict';\n\nimport { sha1Hex } from '../dep/jshash/sha1';\n\nwindow.globalModules.sha1 = {\n    sha1Hex: sha1Hex,\n};\n"]}